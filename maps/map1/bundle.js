(function (React$1, ReactDOM, d3, topojson) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  const jsonUrl = 'https://unpkg.com/us-atlas@3.0.0/states-10m.json';

  const useUSAtlas = () => {
    const [data, setData] = React$1.useState(null);
    React$1.useEffect(() => {
      d3.json(jsonUrl).then(topology => {
        const { states } = topology.objects;
      	setData({
          states: topojson.feature(topology, states),
          interiors: topojson.mesh(topology, states, (a, b) => a != b)
        });
      });
    }, []);
      

    return data;
  };

  const csvUrl = "https://raw.githubusercontent.com/hussein320/5MTREES_D3_DATA_Visualization/main/dotdens_map/data/map1data.csv";

  const useData = () => {
    const [data, setData] = React$1.useState(null);
    
    React$1.useEffect(() => {
      d3.csv(csvUrl).then(setData);
    }, []);
      
    return data;
  };

  const projection = d3.geoAlbersUsa();
  const path = d3.geoPath(projection);

  const Marks = ({ 
    USAtlas: { states, interiors }, 
    data,
  }) => (
    React.createElement( 'g', { className: "marks" },
      states.features.map(feature => (
        React.createElement( 'path', { className: "states", d: path(feature) })
      )),
      React.createElement( 'path', { className: "interiors", d: path(interiors) }),
      data.map(d => {
        const [x, y] = projection([d.long, d.lat]);
        return React.createElement( 'circle', { 
                 cx: x, cy: y, r: 2 }
          	 	 )
      })
    )
  );

  const BubbleMap = ({ data, USAtlas }) => {
    const sizeValue = d => d.AQI;
  	const maxRadius = 5;
          
    const sizeScale = d3.scaleSqrt()
  		.domain([0, d3.max(data, sizeValue)])
    	.range([0, maxRadius]);
    
    return(
  		React$1__default.createElement( Marks, {
        USAtlas: USAtlas, data: data, sizeScale: sizeScale, sizeValue: sizeValue })
    );
  };

  const width = 960;
  const height = 500;

  const App = () => {
    const USAtlas = useUSAtlas();
    const data = useData();

    if (!USAtlas || !data) { 
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }
  const funkyHeaderStyle = {
      textAlign: 'center',
      margin: '20px 0',
      fontFamily: '', // Use a funky font-family here
      color: 'black', // Adjust the color to your preference
      textShadow: '2px 2px 4px rgba(0, 0, 0, 0.5)', // Add a text shadow for effect
       fontSize: '1.4rem',
  };
  return (
  React$1__default.createElement( 'div', null,
        React$1__default.createElement( 'h1', { style: funkyHeaderStyle }, "Dot Density Map for Trees Distribution Across All States"),
        React$1__default.createElement( 'svg', { width: width, height: height },
          React$1__default.createElement( BubbleMap, { data: data, USAtlas: USAtlas })
        )
      )
  	);
  };

  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3, topojson));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,