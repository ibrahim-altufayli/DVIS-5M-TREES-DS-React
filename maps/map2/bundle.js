(function (React, ReactDOM, d3, topojson) {
  'use strict';

  var React__default = 'default' in React ? React['default'] : React;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  const jsonUrl = 'https://unpkg.com/us-atlas@3.0.0/states-10m.json';

  const useUSAtlas = () => {
    const [data, setData] = React.useState(null);
    React.useEffect(() => {
      d3.json(jsonUrl).then(topology => {
        const { states } = topology.objects;
      	setData({
          states: topojson.feature(topology, states),
          interiors: topojson.mesh(topology, states, (a, b) => a != b)
        });
      });
    }, []);
      

    return data;
  };

  const csvUrl = "https://raw.githubusercontent.com/hussein320/5MTREES_D3_DATA_Visualization/main/dotdens_map/data/map2data.csv";

  const useData = () => {
    const [data, setData] = React.useState(null);
    
    React.useEffect(() => {
      d3.csv(csvUrl).then(setData);
    }, []);
      
    return data;
  };

  // Marks.js

  const projection = d3.geoAlbersUsa();
  const path = d3.geoPath(projection);

  const Legend = ({ colorDictionary, width, height }) => (
    React__default.createElement( 'svg', { width: 200, height: height, style: { marginLeft: '3cm' } },
      React__default.createElement( 'g', { transform: `translate(20,20)` },
        Object.entries(colorDictionary).map(([name, color], index) => (
          React__default.createElement( 'g', { key: name, transform: `translate(0,${index * 20})` },
            React__default.createElement( 'circle', { cx: 0, cy: 0, r: 8, fill: color }),
            React__default.createElement( 'text', { x: 12, y: 5, style: { fontSize: '12px', fill: '#333' } },
              name
            )
          )
        ))
      )
    )
  );

  const colorDictionary = {
    'other': '#1f77b4',
    'fraxinus pennsylvanica': '#ff7f0e',
    'acer rubrum': '#2ca02c',
    'gleditsia triacanthos': '#d62728',
    'acer saccharum': '#9467bd',
    'acer platanoides': '#8c564b',
    'platanus acerifolia': '#e377c2',
    'quercus palustris': '#7f7f7f',
    'quercus virginiana': '#bcbd22',
    'pyrus calleryana': '#17becf',
    'tilia cordata': '#a55eea',
  };

  const Marks = ({ USAtlas: { states, interiors }, data, width, height }) => (
    React__default.createElement( 'svg', { width: width, height: height },
      React__default.createElement( 'g', { className: "marks" },
        states.features.map(feature => (
          React__default.createElement( 'path', { key: feature.id, className: "states", d: path(feature) })
        )),
        React__default.createElement( 'path', { className: "interiors", d: path(interiors) }),
        data.map(d => {
          const [x, y] = projection([d.long, d.lat]);
          const fillColor = colorDictionary[d.name] || 'gray'; // Default to gray if name not found
          return (
            React__default.createElement( 'circle', {
              key: `${d.name}-${x}-${y}`, cx: x+ (Math.random() - 0.1) * 10, cy: y+ (Math.random() - 0.1) * 10, r: 2, fill: fillColor, stroke: "#fff", strokeWidth: "0.5" })
          );
        })
      ),
     React__default.createElement( Legend, { colorDictionary: colorDictionary, width: 200, height: height }) 
    )
  );

  const BubbleMap = ({ data, USAtlas }) => {
    const sizeValue = d => d.AQI;
  	const maxRadius = 5;
          
    const sizeScale = d3.scaleSqrt()
  		.domain([0, d3.max(data, sizeValue)])
    	.range([0, maxRadius]);
    
    return(
  		React__default.createElement( Marks, {
        USAtlas: USAtlas, data: data, sizeScale: sizeScale, sizeValue: sizeValue })
    );
  };

  const width = 960;
  const height = 500;

  const App = () => {
    const USAtlas = useUSAtlas();
    const data = useData();

    if (!USAtlas || !data) { 
      return React__default.createElement( 'pre', null, "Loading..." );
    }
  const funkyHeaderStyle = {
      textAlign: 'center',
      margin: '20px 0',
      fontFamily: '', // Use a funky font-family here
      color: 'black', // Adjust the color to your preference
      textShadow: '2px 2px 4px rgba(0, 0, 0, 0.5)', // Add a text shadow for effect
      fontSize: '1.4rem',
  };
    return (
      React__default.createElement( 'div', null,
        React__default.createElement( 'h1', { style: funkyHeaderStyle }, "Dot Density Map for top 10 trees + others Across All States"),
        React__default.createElement( 'svg', { width: width, height: height },
          React__default.createElement( BubbleMap, { data: data, USAtlas: USAtlas })
        )
      )
    );
  };
  const rootElement = document.getElementById('root');
  ReactDOM.render(React__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3, topojson));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,